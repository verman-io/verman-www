name = "verman-schema-rs"
version = "0.0.1"
license = "(Apache-2.0 OR MIT)"
homepage = "https://verman.io"
repo = "https://github.com/verman-io"
authors = ["Samuel Marks <@SamuelMarks>"]

# ^ these are inferred from package.json,
# pyproject.toml, setup.py &etc. if not provided

#############################
# States / deploy semantics #
#############################

# enum State {
#    /// [app/component] install or reinstall
#    /// [service] start or restart
#    "always",
#
#    /// [app/component] install if not installed
#    /// [service] reload if stopped otherwise start
#    "graceful",
#
#    /// [service] ping: if not started/installed:
#    /// - ping next service in array until end
#    /// - error if no services are pingable
#    /// - otherwise set env var | config for pingable service
#    "untouched",
#
#    /// [service] stop service (if service is running)
#    "stop",
#
#    /// [service] uninstall service (if installed)
#    /// [app/component] uninstall (if installed)
#    "remove",
#
#    /// [service] list which services would be started
#    /// [app/component] list what would be installed* (*without making any network requests)
#    "dry_run",
# }

#################################
# States / deploy configuration #
#################################

[stack_state.database]
kind = "sql"
install = "always"
start = "always"

[stack_state.application_server]
install = "always"
start = "always"

[stack_state.routing]
install = "always"
start = "always"

#######################
# Stack configuration #
#######################

[[stack.database]]
kind = "sql"

[[stack.application_server]]
kind = "python"
# other than `kind`; rest optional:
versions = ["~2.7", "~3.6", "~3.13"]
server_priority = ["Waitress", "mod_wsgi", "uvicorn"]

[[stack.application_server]]
kind = "ruby"

###############################
# Stack (routing) #
###############################

[[stack_routing]]
# `name` is optional if no `CNAME` file
name = "my_name.verman.io"
# rest optional:
protocol = "https"
certificate_vendor = "LetsEncrypt"
provider = "nginx"  # AWS Route 53 | Apache | ...
provider_version = "*"

##############
# Components #
##############

[[component]]
src_uri = "file://python_api_folder/"
dst_uri = "http://localhost:${env.PYTHON_API_PORT}"

# inferred from setup.py | setup.cfg | pyproject.toml
# ...or you can explicitly specify constraints:
constraints = [ { kind = "lang", required_variant = "python" }, { kind = "OS" } ]

[[component]]
src_uri = "file://ruby_api_folder/"

[component.dst_uri]
if = "OS == \"windows\""
then = '"\\.\pipe\PipeName"'
else = "\"unix:///var/run/my-socket.sock\""

[[component.constraints]]
kind = "lang"
required_variant = "ruby"
# inferred from Gemfile | version.rb | VERSION | .gemspec
# ...or you can explicitly specify constraints:
required_version = ">3.1.2, <3.2"

[[component.constraints]]
kind = "OS"
required_variant = "${\"linux\" || \"windows\"}"

[[component]]
dst_uri = "my_app.verman.io"
constraints = [ { kind = "routing" } ]

# Escape-hatch to the basic `mounts` syntax, you can punch out of verman like so:

[component.vendor.nginx.windows]
kind = "server_block"
uri = "file://win_nginx.site_avail.conf"

[component.vendor.nginx.linux]
kind = "server_block"
uri = "file://nginx.site_avail.conf"

# OS list is from https://doc.rust-lang.org/std/env/consts/constant.OS.html
# if (routing `vendor` is not `nginx` or OS does not match) then the below takes priority:

[component.mounts."/api/py"]
kind = "python"
location = '${stack.components[.kind=="python"].uri}'

[component.mounts."/api/ruby"]
kind = "ruby"
location = '${stack.components[.kind=="ruby"].uri}'

[component.mounts."/"]
kind = "static"
location = "${env.WWWROOT}"
