name = "verman-schema-rs"
version = "0.0.1"
license = "(Apache-2.0 OR MIT)"
homepage = "https://verman.io"
repo = "https://github.com/verman-io"
authors = ["Samuel Marks <@SamuelMarks>"]

# ^ these are inferred from package.json,
# pyproject.toml, setup.py &etc. if not provided

#############################
# States / deploy semantics #
#############################

# enum State {
#    /// [app/component] install or reinstall
#    /// [service] start or restart
#    "always",
#
#    /// [app/component] install if not installed
#    /// [service] reload if stopped otherwise start
#    "graceful",
#
#    /// [service] ping: if not started/installed:
#    /// - ping next service in array until end
#    /// - error if no services are pingable
#    /// - otherwise set env var | config for pingable service
#    "untouched",
#
#    /// [service] stop service (if service is running)
#    "stop",
#
#    /// [service] uninstall service (if installed)
#    /// [app/component] uninstall (if installed)
#    "remove",
#
#    /// [service] list which services would be started
#    /// [app/component] list what would be installed* (*without making any network requests)
#    "dry_run",
# }

[[stack.database]]
kind = "sql"

[[stack.application_server]]
kind = "python"
versions = ["~2.7", "~3.6", "~3.13"]
server_priority = ["Waitress", "mod_wsgi", "uvicorn"]

[[stack.application_server]]
kind = "ruby"

[stack_state.database]
kind = "sql"
install = "always"
start = "always"

[stack_state.application_server]
install = "always"
start = "always"

[stack_state.routing]
install = "always"
start = "always"

[[stack_routing]]
name = "my_name.verman.io"
protocol = "https"
certificate_vendor = "LetsEncrypt"

[[component]]
src_uri = "file://python_api_folder/"
dst_uri = "http://localhost:${PYTHON_API_PORT}"

[[component.constraints]]
kind = "lang"
required_variant = "python"

[[component.constraints]]
kind = "OS"

[[component]]
src_uri = "file://ruby_api_folder/"
dst_uri = '''
#!/jq
if $OS == "windows" then "\\.\pipe\PipeName" else "unix:///var/run/my-socket.sock"'''

[[component.constraints]]
kind = "lang"
required_variant = "ruby"
required_version = ">3.1.2, <3.2"

[[component.constraints]]
kind = "OS"
required_variant = """
#!/jq
$OS | in({\"linux\" || \"windows\"})"""

[[component]]
dst_uri = "my_app.verman.io"

[[component.constraints]]
kind = "routing"

[component.env_vars]
COMPONENT_NAME = "mount_component"

[[component.mounts]]
when = """
#!/jq
$OS == \"windows\""""
uri = "file://win_nginx.conf"
action = "nginx::make_site_available"

[component.mounts.action_args]
upsert = true

[[component.mounts]]
when = """
#!/jq
any(.; .component[].mounts[]?.action | startswith(\"nginx::\"))"""
uri = "/api/py"
src_uri = """
#!/jq
.component[] | select(.constraints | any([.kind, .required_variant] == [\"lang\", \"python\"])).dst_uri"""
action = "mount::expose"

[[component.mounts]]
when = """
#!/jq
any(.; .component[].mounts[]?.action | startswith(\"nginx::\"))"""
uri = "/api/ruby"
src_uri = """
#!/jq
.component[] | select(.constraints | any([.kind, .required_variant] == [\"lang\", \"ruby\"])).dst_uri"""
action = "mount::expose"

[[component.mounts]]
when = "BUILD_TIME > 2024"
uri = "/api/demo"
action = "mount::expose"

[env_vars]
DEBUG_ROOT = "true"
